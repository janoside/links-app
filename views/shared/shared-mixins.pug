mixin pageTitle(text, subtext, copyableSubtext=false)
	h1.fw-light.word-wrap.mb-5
		span.me-2 #{text}

		if (subtext)
			br
			span.text-tiny #{subtext}
				if (copyableSubtext)
					small
						+copyTextButton(subtext)

		if (block)
			block
	
	//hr.mb-3


mixin sectionTitleBlock
	h3.h5.mb-1.fw-light
		block

			
mixin sectionTitle(text, toggle=false, toggleUniqueClass, toggleUserSettingName, toggleOpen, tooltipText)
	if (false)
		pre
			code.json #{JSON.stringify(session.userSettings)}

	h3.h5.mb-1.fw-light(class=(toggle && !toggleOpen ? "mb-section" : false), class=(!toggle || toggleOpen ? "d-block" : "d-none"))
		if (tooltipText)
			span.border-dotted(title=tooltipText, data-bs-toggle="tooltip")
				| #{text}

		else
			| #{text}

		if (toggle)
			small(title=`Toggle ${text}`, data-bs-toggle="tooltip")
				a.text-muted.fs-6(href=`./changeSetting?name=${toggleUserSettingName}&value=false`)
					i.toggle-plus-minus.far.ms-2(class=(toggleOpen ? "bi-dash-square" : "bi-plus-square"))


mixin contentSection(title, toggleable=false, toggleUserSettingName, defaultOpen=true, cardUi=true)
	if (toggleable)
		- var toggleUniqueClass = `section-${utils.getRandomString(10, "aA#")}`;
		- var toggleOpen = userSettings[toggleUserSettingName] == null ? defaultOpen : (userSettings[toggleUserSettingName] == "true" || userSettings[toggleUserSettingName] == true);

	if (title)
		+sectionTitle(title, toggleable, toggleUniqueClass, toggleUserSettingName, toggleOpen)

	.mb-section(class=toggleUniqueClass, style=(toggleable && !toggleOpen ? "display: none;" : false))
		if (cardUi)
			.card.mb-section.shadow-sm
				.card-body
					block

		else
			block


mixin summaryRow(itemCount)
	- locals.summaryItemCount = itemCount;
	- locals.summaryItemIndex = 0;
	
	- locals.colCounts = {"sm": 1, "md": Math.min(itemCount, 3), "lg": Math.min(itemCount, 4), "xl": Math.min(itemCount, 5)};
	- locals.rowCountsArray = utils.objectProperties(locals.colCounts).map(x => [x, locals.colCounts[x]]).map(x => [x[0], (Math.floor(itemCount / x[1]) + ((itemCount % x[1] > 0) ? 1 : 0))]);
	- locals.rowCounts = {};
	- locals.rowCountsArray.forEach(x => locals.rowCounts[x[0]] = x[1]);

	//h1 #{itemCount} #{JSON.stringify(locals.rowCounts)}

	.row.row-cols-1(class=utils.objectProperties(locals.colCounts).map(x => `row-cols-${x}-${locals.colCounts[x]}`).join(" "))
		block


mixin summaryTitle(title, titleDesc, subtitle, subtitleDesc)
	span.fs-6.text-uppercase.fw-light.text-muted(class=(titleDesc ? "border-dotted" : false), class=(subtitle ? "me-2" : false), title=titleDesc, data-bs-toggle="tooltip", data-bs-html="true") #{title}
	if (subtitle)
		small.text-muted
			| (
			span(class=(subtitleDesc ? "border-dotted" : false), title=subtitleDesc, data-bs-toggle="tooltip", data-bs-html="true") #{subtitle}
			| )


mixin summaryItem(title, titleDesc, subtitle, subtitleDesc)
	- var rowIndexes = utils.objectProperties(locals.colCounts).map(x => [x, locals.colCounts[x]]).map(x => [x[0], Math.floor(locals.summaryItemIndex / x[1])]);

	.col(class=(locals.summaryItemIndex == (locals.summaryItemCount - 1) ? "mb-0" : "mb-3"), class=rowIndexes.map(x => `mb-${x[0]}-${(x[1] < (locals.rowCounts[x[0]] - 1) ? "4" : "0")}`))
		//span.text-danger (#{JSON.stringify(locals.rowCounts)})
		.text-start.text-md-center
			+summaryTitle(title, titleDesc, subtitle, subtitleDesc)
			

		.lead.text-start.text-md-center
			block

	- locals.summaryItemIndex++;


mixin itemListPageHeader(itemCount, limit, offset, sort, paginationBaseUrl)
	.d-md-flex.justify-content-between
		.text-center
			block

		.d-md-flex.align-items-end.mb-2
			if (itemCount > limit)
				+pagination(limit, offset, sort, itemCount, paginationBaseUrl, "center")

			- var colCounts = ["6", "4", "3", "2", "1"];
			nav.ms-md-2.mt-2.mt-md-0.d-none.d-lg-inline-block
				ul.pagination.mb-0
					each colCount in colCounts
						if ((userSettings.listColCount || "3") == colCount)
							li.page-item.disabled
								a.page-link.text-body(href="", aria-disabled="true")
									i.bi-check.me-2
									span #{colCount}

						else
							li.page-item
								a.page-link(href=`./changeSetting?name=listColCount&value=${colCount}`, data-bs-toggle="tooltip", title=`Use ${colCount} column${colCount == "1" ? "" : "s"}`) #{colCount}


			nav.ms-md-2.mt-2.mt-md-0
				ul.pagination.mb-0.justify-content-center.justify-content-md-start
					if (sort == "date-desc")
						li.page-item.disabled
							a.page-link.text-body(href="#", aria-disabled="true")
								i.bi-check.me-2
								span New
								i.bi-arrow-up.ms-1
								
					else
						li.page-item
							a.page-link(href=`${paginationBaseUrl}?sort=date-desc`, type="button") New
								i.bi-arrow-up.ms-1

					if (sort == "date-asc")
						li.page-item.disabled
							a.page-link.text-body(href="#", aria-disabled="true")
								i.bi-check.me-1
								span Old
								i.bi-arrow-up.ms-1
								
					else
						li.page-item
							a.page-link(href=`${paginationBaseUrl}?sort=date-asc`, type="button") Old
								i.bi-arrow-up.ms-1



mixin card()
	.card.shadow-sm.mb-3
		.card-body
			block



mixin timestamp(timestamp, includeAgo=true, formatString)
	- var utcMoment = moment.utc(new Date(parseInt(timestamp) * 1000));

	- var yearStr = utcMoment.format("Y");
	- var nowYearStr = moment.utc(new Date()).format("Y");

	- var dateStr = utcMoment.format("Y-M-D");
	- var nowDateStr = moment.utc(new Date()).format("Y-M-D");

	- var titleStr = `${utcMoment.format("Y-MM-DD HH:mm:ss")} utc`;

	if (formatString)
		span.border-dotted(title=titleStr, data-bs-toggle="tooltip")
			| #{utcMoment.format(formatString)}
			if (["H", "m", "s"].some(str => formatString.includes(str)))
				small.text-muted.ms-1 utc

	else if (dateStr == nowDateStr)
		span.border-dotted(title=titleStr, data-bs-toggle="tooltip")
			| #{utcMoment.format("HH:mm")}
			small.text-muted.ms-1 utc

	else if (yearStr == nowYearStr)
		span.border-dotted(title=titleStr, data-bs-toggle="tooltip")
			| #{utcMoment.format("M/D HH:mm")}
			small.text-muted.ms-1 utc

	else
		span.border-dotted(title=titleStr, data-bs-toggle="tooltip")
			| #{utcMoment.format("YYYY-MM-DD")}

	if (includeAgo)
		small.text-muted.ms-2 (
			+timeAgo(timestamp, true)
			span  ago)


mixin darkBadge(text)
	span.badge.text-bg-dark.border.border-dark.me-2 #{text ? text : ""}
		if (block)
			block


mixin lightBadge(text)
	span.badge.text-bg-light.border.me-2 #{text ? text : ""}
		if (block)
			block


mixin primaryBadge(text, endMargin=true)
	span.badge.text-bg-primary(class=(endMargin ? "me-2" : false)) #{text ? text : ""}
		if (block)
			block


mixin timeAgo(timeAgoTime, only1Element=false)
	- var timeAgo = moment.duration(moment.utc(new Date()).diff(moment.utc(new Date(parseInt(timeAgoTime) * 1000))));

	if (timeAgo.asHours() < 1)
		if (timeAgo.asMinutes() < 1)
			span #{timeAgo.seconds()}s
		else
			span #{timeAgo.minutes()}m

	else
		if (timeAgo.asHours() >= 1 && timeAgo.asHours() < 24)
			span #{timeAgo.hours()}h

			if (!only1Element && timeAgo.minutes() > 0)
				span.ms-1 #{timeAgo.minutes()}m

		else
			if (only1Element)
				span #{utils.shortenTimeDiff(timeAgo.format()).split(/,?\s+/)[0]}
			else
				span #{utils.shortenTimeDiff(timeAgo.format())}


mixin copyTextButton(text, defaultTooltip="Copy")
	if (false)
		a(href="javascript:void(0)", title="Copy", data-clipboard-text=text, data-bs-toggle="tooltip", onclick=`copyTextToClipboard("${text}"); $(".icon-copy").toggle(); $(this).find(".icon-copied").toggle(); setTimeout(() => { $(this).find(".icon-copy").toggle(); $(this).find(".icon-copied").toggle(); }, 2000); return false;`)
			i.bi-clipboard.text-info.icon-copy
			i.bi-check.text-success.icon-copied(style="display: none;")

	a(href="javascript:void(0)", title=defaultTooltip, data-clipboard-text=text, data-bs-toggle="tooltip", onclick=`copyTextToClipboard("${text}"); $(this).attr("title", "Copied!").tooltip("_fixTitle").tooltip("show"); $(this).mouseleave(function() { $(this).tooltip("hide"); $(this).attr("data-bs-original-title", "${defaultTooltip}"); });`)
		if (block)
			block
		else
			i.bi-clipboard.text-info


mixin dismissableInfoAlert(userSettingDismissedName, textToShowWhenClosed)
	if (!userSettings.hideInfoNotes || userSettings.hideInfoNotes == "false")
		if (userSettings[userSettingDismissedName] != "true")
			.alert.alert-primary.alert-dismissible.shadow-sm.mb-4.ps-3.ps-md-7(role="alert")
				i.d-none.d-md-inline.bi-info-circle.d-inline-block(style="position: absolute; top: 0; left: 0; width: 36px; margin-left: 0.4rem; margin-top: 1.3rem;")

				block

				a.btn-close(href=`./changeSetting?name=${userSettingDismissedName}&value=true`, aria-label="Close", style="text-decoration: none;", title="Hide this note", data-bs-toggle="tooltip")
				//button.btn-close.text-muted(type="button", data-bs-dismiss="alert", aria-label="Close", title="Hide this note", data-bs-toggle="tooltip")

		else if (textToShowWhenClosed)
			.alert.alert-primary.shadow-sm.mb-4(role="alert")
				.clearfix
					.float-start
						i.bi-info-circle.me-3
						| #{textToShowWhenClosed}

					.float-end
						a.text-muted(href=`./changeSetting?name=${userSettingDismissedName}&value=false`, aria-label="Close", style="text-decoration: none;", title="Open this note", data-bs-toggle="tooltip")
							i.bi--plus-square


mixin warningAlert
	.alert.alert-warning.shadow-sm.mb-4.ps-3.ps-md-7(role="alert")
		i.d-none.d-md-inline.bi-exclamation-triangle.d-inline-block(style="position: absolute; top: 0; left: 0; width: 36px; margin-left: 0.4rem; margin-top: 1.3rem;")

		block


mixin numWithMutedDecimals(numString)
	if (numString.indexOf(".") >= 0)
		- var n = numString.substring(0, numString.indexOf("."));
		- var dec = numString.substring(numString.indexOf("."));

		span #{n}
		small.text-muted #{dec}

	else
		span #{numString}
				




mixin pagination(limit, offset, sort, itemCount, baseUrl, justification="start", large=false)
	- var pageNumber = offset / limit + 1;
	- var pageCount = Math.floor(itemCount / limit);
	- if (pageCount * limit < itemCount) {
		- pageCount++;
	- }
	- var paginationUrlFunction = function(x) {
		if (baseUrl.includes("?"))
			- return `${baseUrl}&limit=${limit}&offset=${(x - 1) * limit}${sort ? ("&sort=" + sort) : ""}`
		else
			- return `${baseUrl}?limit=${limit}&offset=${(x - 1) * limit}${sort ? ("&sort=" + sort) : ""}`
		//- return baseUrl + "?limit=" + limit + "&offset=" + ((x - 1) * limit);
		//- return baseUrl + "?limit=" + limit + "&offset=" + ((x - 1) * limit + "&sort=" + sort);
	- }

	- var pageNumbers = [];
	- for (var x = 1; x <= pageCount; x++) {
		- pageNumbers.push(x);
	- }

	nav(aria-label="Page navigation")
		ul.pagination.flex-wrap.mb-0(class=`justify-content-${justification}`, class=(large ? "pagination-lg" : false))
			li.page-item(class=(pageNumber == 1 ? "disabled" : false))
				a.page-link(href=(pageNumber == 1 ? "javascript:void(0)" : paginationUrlFunction(pageNumber - 1)), aria-label="Previous")
					span(aria-hidden="true") &laquo;
			each x, xIndex in pageNumbers
				if (x >= (pageNumber - 4) && x <= (pageNumber + 4) || xIndex == 0 || xIndex == (pageNumbers.length - 1))
					li.page-item(class=(x == pageNumber ? "active" : false))
						a.page-link(href=(paginationUrlFunction(x))) #{x}

					if (x == 1 && pageNumber > 6)
						li.page-item.disabled
							a.page-link(href="javascript:void(0)") ...

				else if (x == (pageCount - 1) && pageNumber < (pageCount - 5))
					li.page-item.disabled
						a.page-link(href="javascript:void(0)") ...
				
			li.page-item(class=(pageNumber == pageCount ? "disabled" : false))
				a.page-link(href=(pageNumber == pageCount ? "javascript:void(0)" : paginationUrlFunction(pageNumber + 1)), aria-label="Next")
					span(aria-hidden="true") &raquo;





mixin adminModalAndButton(buttonText)
	button.btn.btn-warning(type="button", data-bs-toggle="modal", data-bs-target="#sessionModal")
		i.bi-shield-lock-fill.me-2
		span #{buttonText}

	.modal(id="sessionModal", tabindex="-1", aria-labelledby="session json", aria-hidden="true")
		.modal-dialog.modal-xl
			.modal-content
				.modal-header
					h5.modal-title #{buttonText}
					button.btn-close(type="button", data-bs-dismiss="modal", aria-label="Close")
				.modal-body
					block



mixin loginForm(targetAction, showRememberMe)
	form(method="post", action=targetAction)

		fieldset.mb-4
			label.mb-2(for="username") Username
			input.form-control(id="username", name="username", type="text", placeholder="username", required="true")

		fieldset.mb-4
			label.mb-2(for="password") Password
			input.form-control(id="password", name="password", type="password", placeholder="password")
		
		if (showRememberMe)
			fieldset.mb-4
				label.mb-2(for="rememberme")
					input.me-2(id="rememberme", name="rememberme", type="checkbox")
					| Stay logged in
			

		.d-grid
			button.btn.btn-primary(type="submit") Login